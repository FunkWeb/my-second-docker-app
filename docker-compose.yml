volumes:
  pg_data:

services:
  pgsql:
    restart: unless-stopped
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: pgdb
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: notsecurepassword
    ports:
      - "5432:5432"
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U pguser -d pgdb" ]
      interval: 5s
      timeout: 3s
      retries: 10

  valkey:
    restart: unless-stopped
    image: valkey/valkey:8-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "valkey-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 10

  backend:
    depends_on:
      pgsql:
        condition: service_healthy
      valkey:
        condition: service_healthy
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://pguser:notsecurepassword@pgsql:5432/pgdb
      REDIS_URL: redis://valkey:6379
      PORT: 3000
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health" ]
      interval: 10s
      timeout: 3s
      retries: 3

  worker:
    depends_on:
      pgsql:
        condition: service_healthy
      valkey:
        condition: service_healthy
    restart: unless-stopped
    build:
      context: .  # Use project root to access shared folder
      dockerfile: worker/Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://pguser:notsecurepassword@pgsql:5432/pgdb
      REDIS_URL: redis://valkey:6379

  frontend:
    depends_on:
      - backend
    restart: unless-stopped
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: prod
    ports:
      - "8080:80"
    environment:
      VITE_API_URL: http://localhost:3000